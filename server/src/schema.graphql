type Query {
  hello: String!
  platforms: [Platform]!
  systems(capabilityId: String!): [System]!
}

enum BoxType {
  Platform
  Domain
  Capability
}

type Mutation {
  createBox(
    name: String!
    id: String!
    boxType: BoxType!
    parentId: String
    systems: [String!]
  ): Box!

  createTechnology(id: String!, name: String!): Technology!

  createSystem(
    id: String!
    name: String!
    parentBoxId: String
    technologies: [String!]
  ): System!

  deleteAll: Result!
}

type Result {
  result: Boolean!
}

type Box {
  id: ID!
  name: String!
}

type Platform {
  id: ID!
  name: String!
  domains: [Domain!]!
}

type Domain {
  id: ID!
  name: String!
  capabilities: [Capability!]!
}

type Capability {
  id: ID!
  name: String!
}

type System {
  id: ID!
  name: String!
  technologies: [Technology!]!
}

type Technology {
  id: ID!
  name: String!
}
